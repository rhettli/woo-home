local _M = { _is_use_sys = false, _os = _os() }

--- 初始化
---@param localFile string@本地文件，未提供，则操作系统环境变量
---@return self
function _M:new(localFile)
    if localFile then
        self._local_env = _cat(localFile, true)
    end

    return self
end

function _M:set(key, value)
    if self._is_use_sys then
        -- 使用系统环境变量
        if self._os == 'widows' then
            local path = _env('path')
            if _str_index(path, bin_path) == -1 then
                path = path .. ';' .. bin_path
                _exec({ 'cmd', '/c', 'setx path "' .. path .. '"' })
                return true
            end
            return nil
        else
            local path = _cat(' ~/.bashrc', true)
            if not _re_match(path, 'export .*?' .. bin_path)[1] then
                _exec({ 'sh', '-c', 'echo export PATH=' .. '$PATH:' .. bin_path .. ' >> ~/.bashrc && source ~/.bashrc' })
                return true
            end
            return nil

        end

    else
        -- 使用本地文件环境变量

    end

    return self
end

--- 是否是使用系统环境变量
function _M:useSysEnv()
    self._is_use_sys = true
    return self
end

function _M:get(name)
    --print(con)
    if self._local_env then
        for _, v in pairs(_str_split(self._local_env, '\n')) do
            v = _trim(v, '\r\t')
            if not _begin_with(v, '#') and v ~= "" then
                --local s = _str_split(v, '=')

                --print('+++v:', v)

                local key = _sub_ex('n', v, '=')
                --print('+++key:', key)

                if key == name then
                    --print('+++val:',_sub_ex('re', v, '='))
                    return _sub_ex('re', v, '=')
                end
            end
        end
    end

    if self._is_use_sys then
        -- 使用系统环境变量
        return _env(name)
    end

    return ''
end

return _M