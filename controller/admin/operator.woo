local _M = { model_name = 'operator', show_list = true }

-- here defined the operator permission item use []  (使用[]来定义一个权限)
-- use P: I: (使用P: 开头表示权限类，I:开头表示权限类中的项目)

-- [P:operator|管理员]
-- [I:update|更新]
function _M:update()
    local id = _http_params('id')
    assert(_is_valid(id), 'no id')

    local Member = _new_model('operator')

    local memberObj = Member:findFirstById(_http_params('id'))
    if _is_valid(memberObj) then
        self:assign(memberObj, 'member')
        print(_json_encode(memberObj))

        if _trim(memberObj.password_) ~= '' then
            -- 更新密码
            memberObj.password = _md5(memberObj.password_)
        end

        if memberObj.operator_role_id == '0' then
            -- 如果id为0表示admin权限
            memberObj.role = 'admin'
        else
            -- 否则修改role为空
            memberObj.role = ''
        end
        memberObj:Save()
    end

    return self:renderJSON()
end


-- [I:edit|新建或编辑页面]
function _M:edit()
    local id = _http_params('id')

    local _operator = self:model('operator')
    print('model new:=', _json_encode(_operator))

    if _is_valid(id) then
        _operator = _operator:findFirstById(id)
        if not _operator then
            assert(operator, 'not find member with id:' .. id)
        end
    else
        -- 如果是新建后台用户，默认角色不能为管理员，直接设置为1
        _operator.operator_role_id = 1
    end

    self:view('operator', _operator):render("admin.operator.edit")
end

function _M:dashboard()
    local data = { ver = _ver(), os = _os(true) }
    self:view(self.model_name, data):render('admin.' .. self.model_name .. '.dashboard')
end

-- [I:edit|列表页面]
function _M:list()
    local res = {}

    local cond = self:getConditions(self.model_name)

    local page = _http_params('page')
    page = page and page or 1
    res = __model[self.model_name]:findPagination(cond, page * 1, 30)

    self:view(self.model_name .. 's', res):render("admin." .. self.model_name .. ".list")
end

function _M:_beforeIndex()
    self.show_list = false -- index是login页面不显示navbar
end

function _M:login()
    if _http_header('x-requested-with') == 'XMLHttpRequest' then

        local username, password = _http_params('username', 'password')

        local ip = _http_ip()

        print(username, password, ip)

        local operator = __model.operator:findFirstBy('username', username)
        print(username, password,_md5(password), operator.password)

        if not operator or _md5(password) ~= operator.password then
            --_http_session('operator_psw', '');

            --local operator = Operators:findFirst()
            --if not _is_valid(operator) then
            --    operator = Operators:new();
            --    operator.username = 'admin';
            --    operator.password = md5(password);
            --    operator.password_updated_at = _time();
            --    operator.status = 1;
            --    operator.role = 'admin';
            --    operator.ip = ip;
            --    operator.created_at = _time();
            --    operator.updated_at = _time();
            --    operator:save();
            --    _http_redirect('/admin/operator/dashboard')
            --    return
            --end

            -- todo 登陆3次，密码错误，直接封禁此ip地址
            -- todo 使用验证码




            return self:renderJSON({}, '用户不存在或密码不正确', -1)
        end

        if (operator:isBlocked()) then
            _http_cookie('operator_psw', '')
            return self:renderJSON({}, '帐号被禁用', -1)
        end

        operator.ip = ip
        operator.active_at = _time()
        operator:update()

        -- todo 超过一定时间重置密码
        --if (_time() - operator.password_updated_at > 3600 * 24 * 30) then
        --http_redirect('/admin/home/reset_password')
        --end

        _http_cookie('i', operator.id, '/', _time() + 86400)
        _http_cookie('m', _md5(operator.password .. ' .;:,'), '/', _time() + 86400)

        -- 记录管理员登录log
        local olh = __model.operator_login_his:new()
        olh.operator_id = operator.id
        olh.ip = ip
        olh.created_at = _time()
        olh:save()

        -- js内部做跳转，这里不用写302/304，前段js获取到Location字段自动跳转
        _http_redirect('/admin/operator/dashboard', 200)
    end

end

_M = _extend(_M, "controller/admin/_base")

return _M.super[2](_M)